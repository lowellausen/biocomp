import numpy as np

word1 = list('MFVLKGSVVQAFVLLSIVCLEITIADDGVRYVNAEWKRPEQSQEGRHSCTARRLEDNSEEVACSTEVKFRQRAPAEYANKIKKAKDKLRRLESQFDDCQQENDRKDRLIQLQANLTDTIHRLVTDSDIQALRSSWATLTAGADGRNNFGNNFVLWLLNTIPNIRERFEKFNAHQSDEALKNDNEFVKQVKLIVGGLQSFIDNLENPGQLQATIERLASVHLKMRPTIGLEYFRPLQENIAQYVASALGVGADDAAPKAWERLLNAFNEVLNSFANYNIGLSDTDKVALQSSWSRLTAGADGKRNAGVRLVLWMFNNVPNMRERFTKFNARQSDEALKTDAEFLKQVDAIIGGFETLINNLNDADLLLNRLESLADEHLEKKPAISSNYFGPLQKNIHLFIEGTLNFGSDSDEARAWTHLVGALNKVIKDHAIHNLGLSDIDRDALVSSWNQLTGRAGGSRNAGTNLVLWMLENVPNMRDQFSKFNARQSDDNLRKDAEFVRQVDLITGGLESLVDNVNNPIFLQEALVRLADAHLNLKPRVGLEYFGPLQRYIHAYIEKALGVSADSAAPRAWTDLLTAFNNVLKDRTFLRIVSDDDRRALQSSWSRLQSQAGNKQEAGIKLVTWLFDNVPNMRDRFTKFNAHSSDEALRANNEFLRQVDVIVGGLDSLINNVDNSDNFQAAIERLVDVHLHMSPSVGLEYFGPLQQNIRSYIQNALGVAADSAEARSWTNLFTAFNEFLADHTIQKIGLSPTDRKVLDRTWKQLTSGGKQEAGVKLVLWMFDQVPNMRDQFSKFDARKSEAELRNDAEFINQVNNIVGGLDSILNNLDKPGQLQAALERLADYHLDHKPRIGLEFFGPLQKYIHLYIESALNVAVGSEESRAWTDLLTALNKVIRDHAIDRLGLSDNDREAIDSSWKKLRSGAGGRRNAGIKLVQWMLRTIPNMRDRFNKFDAKQSDAALQRDPEFLAQVDRILGGVESLVNNVDDPVALKAAIDRLADAHLSFDPRVGLDYFGPLQTYIHDYIEEALGVGADSDEAKGWTDLFAAFNKVLKERTVLKIVSDNERAALRSSWDSLKSAAGGTQEAGVRLVLWMLQNVPNMRERFNKFNALQGDDALRADAEFVKQVERIAGGLESLINNVDNQGKLQAAIDRLVNAHLNFRPSVGLEYFQPLQENIYKYLESALIVAADSNEAKAWTHLLSAFNTVLREHSLEKIGLSDVDRKALESSWKKLTDAAGGSENAGTNLVFWLLDNVPNMRDRFTKFNAHQSNAALQDDDEFRNQVRAITRGIESFVNNVNNPAALQSSIENLVDAHLNFQPSIGLSYFGSVQQYIHLYIAKALGVASNSDEAKSWTNLFAAFNKVLKEHSLEKIGISDSDKRALVSSWKKLTAGGRQNFGVDLVLWMFNNVPNMREQFTKFDAKQSDADLRRDPNFLKQVNNIINGVGDLVDSVNDPGKLQANLERLTDVHLHFVPSVGPEFFGPLQKNIHTFIEQALGVGADSDEPKAWTDLIGAFNKVLNDHAIQHIGLSETDRRALDSSWKRLTAGENGVQKAGVNLVLWFFNNIPNMRERFTKFDANQADDALRADPEFQKQVNVIVGGLKSFLDSVNDPIALQANMDRVAEAHLSMDPVVGVPYFSALSQNIHRFIEISLGVTADSDESQAWTDLLAGFTRVVRNRAVLRKVSDSDKSAFVSSWNELIRKAASRRNAGVNLVLWLFNNVPNMRNHFTKFNGNQPDAALRNDQEFLNQVDRIAGGLESLVKNVNNPARFLDALERLSSAHLNMKPSIGLEYFGPLQQNIHTYIESALGVAAGSDEANAWTDVFGAFNEILKYSSVEKIGLSDSDKQALTSSWSSLIAEGKDTAGEKLVLWMFDNVPNMRARFTKFDATQSDEALRNDKEFRNQVNVIVGGLELLINSVNEPGQLQANLEKLVDDHLHMVPSVGLEYFGPLQKYIHLFIEKALGVSSNSVESKSWTNLLRAFNKVLKEHSVKKIGLSEEDRKAIVSSWRKLVGRAGGRDNAGTNLVLWMFENVPNMRDRFTKFNAYQPDSALRQDREFGAQVDRITSGLESLVNNVENPGQFQAALERLSTLHKNKTPSVGLQYFGPLQRYIHLYIEQNLNVASDSVESRAWTNLFASFNEVLKKA')
word2 = list("MEKVPGEMEIERRERSEELSEAERKAVQAMWARLYANCEDVGVAILVRFFVNFPSAKQYFSQFKHMEDPLEMERSPQLRKHACRVMGALNTVVENLHDPDKVSSVLALVGKAHALKHKVEPVYFKILSGVILEVVAEEFASDFPPETQRAWAKLRGLIYSHVTAAYKEVGWVQQVPNATTPPATLPSSGP")

#word1 = 'aaaaabb'
#word2 = 'bbccccc'

size1 = len(word1)
size2 = len(word2)

gap = -2
match = 1
mismatch = -1

matrix = np.zeros((size1 + 1, size2 + 1))

def matching(a, b):
    if a == b:
        return match
    else:
        return mismatch

maxval = -1000

for i in range(1, size1 + 1):
    for j in range(1, size2 + 1):
        val = max(matching(word2[j-1], word1[i-1]) + matrix[i-1][j-1], gap + matrix[i-1][j], gap + matrix[i][j-1], 0)
        if val >= maxval:
            maxval = val
        matrix[i][j] = val


def back_trace(starti, startj):
    res1 = ''
    res2 = ''
    i = starti
    j = startj
    matches = 0
    while matrix[i][j] != 0:
        up = matrix[i-1][j]
        left = matrix[i][j-1]
        diag = matrix[i-1][j-1]

        if diag >= up and diag >= left:
            res1 += word1[i-1]
            res2 += word2[j-1]
            i -= 1
            j -= 1
            if word1[i] == word2[j]:
                matches += 1
        elif up >= diag and up >= left:
            res1 += word1[i-1]
            res2 += '-'
            i -= 1
        else:
            res1 += '-'
            res2 += word2[j-1]
            j -= 1
    res1 = res1[::-1]
    res2 = res2[::-1]
    print('Cadeias alinhadas: Identidade do alinhamento: %2.2f' % (matches/len(res1)*100) + '%')
    print(res1)
    print(res2)
    print("")


for i in range(size1):
    for j in range(size2):
        if matrix[i][j] == maxval:
            back_trace(i, j)

print('Tabela de alinhamento:')
print(matrix)
print('\nScore do alinhamento: %d' % maxval)

